diff --git a/Cargo.lock b/Cargo.lock
index fd52bd7d..b8196a07 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1043,6 +1043,16 @@ dependencies = [
  "encoding_rs",
 ]
 
+[[package]]
+name = "codespan-reporting"
+version = "0.11.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e"
+dependencies = [
+ "termcolor",
+ "unicode-width",
+]
+
 [[package]]
 name = "combine"
 version = "4.6.6"
@@ -1068,8 +1078,6 @@ dependencies = [
 [[package]]
 name = "console"
 version = "0.15.5"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c3d79fbe8970a77e3e34151cc13d3b3e248aa0faaecb9f6091fa07ebefe5ad60"
 dependencies = [
  "encode_unicode",
  "lazy_static",
@@ -1375,6 +1383,50 @@ dependencies = [
  "zip",
 ]
 
+[[package]]
+name = "cxx"
+version = "1.0.94"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f61f1b6389c3fe1c316bf8a4dccc90a38208354b330925bce1f74a6c4756eb93"
+dependencies = [
+ "cc",
+ "cxxbridge-flags",
+ "cxxbridge-macro",
+ "link-cplusplus",
+]
+
+[[package]]
+name = "cxx-build"
+version = "1.0.94"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "12cee708e8962df2aeb38f594aae5d827c022b6460ac71a7a3e2c3c2aae5a07b"
+dependencies = [
+ "cc",
+ "codespan-reporting",
+ "once_cell",
+ "proc-macro2",
+ "quote",
+ "scratch",
+ "syn 2.0.16",
+]
+
+[[package]]
+name = "cxxbridge-flags"
+version = "1.0.94"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7944172ae7e4068c533afbb984114a56c46e9ccddda550499caa222902c7f7bb"
+
+[[package]]
+name = "cxxbridge-macro"
+version = "1.0.94"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2345488264226bf682893e25de0769f3360aac9957980ec49361b083ddaa5bc5"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.16",
+]
+
 [[package]]
 name = "darling"
 version = "0.14.4"
@@ -1930,8 +1982,6 @@ dependencies = [
 [[package]]
 name = "grex"
 version = "1.4.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "871b7d5e24db263a3f17ac228d6be2fdcafac8986bd34c052662167428897425"
 dependencies = [
  "itertools",
  "lazy_static",
@@ -2136,8 +2186,6 @@ dependencies = [
 [[package]]
 name = "iana-time-zone"
 version = "0.1.56"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0722cd7114b7de04316e7ea5456a0bbb20e4adb46fd27a3697adb812cff0f37c"
 dependencies = [
  "android_system_properties",
  "core-foundation-sys",
@@ -2149,11 +2197,10 @@ dependencies = [
 
 [[package]]
 name = "iana-time-zone-haiku"
-version = "0.1.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
+version = "0.1.1"
 dependencies = [
- "cc",
+ "cxx",
+ "cxx-build",
 ]
 
 [[package]]
@@ -2215,8 +2262,6 @@ checksum = "bfa799dd5ed20a7e349f3b4639aa80d74549c81716d9ec4f994c9b5815598306"
 [[package]]
 name = "instant"
 version = "0.1.12"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c"
 dependencies = [
  "cfg-if",
 ]
@@ -2349,7 +2394,6 @@ dependencies = [
  "parking_lot 0.12.1",
  "percent-encoding",
  "regex",
- "reqwest",
  "serde",
  "serde_json",
  "time 0.3.21",
@@ -2543,6 +2587,15 @@ dependencies = [
  "cc",
 ]
 
+[[package]]
+name = "link-cplusplus"
+version = "1.0.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ecd207c9c713c34f95a097a5b029ac2ce6010530c7b49d7fea24d977dede04f5"
+dependencies = [
+ "cc",
+]
+
 [[package]]
 name = "linked-hash-map"
 version = "0.5.6"
@@ -4260,6 +4313,12 @@ version = "1.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"
 
+[[package]]
+name = "scratch"
+version = "1.0.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1792db035ce95be60c3f8853017b3999209281c24e2ba5bc8e59bf97a0c590c1"
+
 [[package]]
 name = "sct"
 version = "0.7.0"
@@ -4746,6 +4805,15 @@ dependencies = [
  "windows-sys 0.45.0",
 ]
 
+[[package]]
+name = "termcolor"
+version = "1.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6"
+dependencies = [
+ "winapi-util",
+]
+
 [[package]]
 name = "test-data-generation"
 version = "0.3.4"
diff --git a/Cargo.toml b/Cargo.toml
index 28b2e8f0..e6d211dd 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -64,6 +64,12 @@ strip         = true
 inherits = "release"
 panic    = "abort"
 
+[patch.crates-io]
+console = { path = "../console" }
+instant = { path = "../instant" }
+iana-time-zone = { path = "../iana-time-zone" }
+grex = { path = "../grex" }
+
 [dependencies]
 ahash = "0.8"
 bincode = "1.3.3"
@@ -113,7 +119,6 @@ itoa = "1"
 jemallocator = { version = "0.5", optional = true }
 jsonschema = { version = "0.17", features = [
     "resolve-file",
-    "resolve-http",
 ], default-features = false }
 jsonxf = { version = "1", optional = true }
 jql-runner = { version = "6.0.7", default-features = false, optional = true }
@@ -155,7 +160,7 @@ reqwest = { version = "0.11", features = [
     "gzip",
     "rustls-tls",
     "stream",
-], default-features = false }
+], default-features = false, optional = true }
 reverse_geocoder = { version = "3", optional = true }
 rust_decimal = "1.29"
 ryu = "1"
@@ -249,6 +254,7 @@ fetch = [
     "jql-runner",
     "jsonxf",
     "redis",
+    "reqwest",
     "serde_stacker",
     "serde_urlencoded",
 ]
diff --git a/src/cmd/sniff.rs b/src/cmd/sniff.rs
index 90da0e67..fd15f6af 100644
--- a/src/cmd/sniff.rs
+++ b/src/cmd/sniff.rs
@@ -80,6 +80,7 @@ use futures::executor::block_on;
 use futures_util::StreamExt;
 use indicatif::{HumanBytes, HumanCount, ProgressBar, ProgressDrawTarget, ProgressStyle};
 use qsv_sniffer::{DatePreference, SampleSize, Sniffer};
+#[cfg(feature = "fetch")]
 use reqwest::Client;
 use serde::{Deserialize, Serialize};
 use serde_json::json;
@@ -275,6 +276,7 @@ const fn rowcount(
 async fn get_file_to_sniff(args: &Args, tmpdir: &tempfile::TempDir) -> CliResult<SniffFileStruct> {
     if let Some(uri) = args.arg_input.clone() {
         match uri {
+            #[cfg(feature = "fetch")]
             // its a URL, download sample to temp file
             url if Url::parse(&url).is_ok() && url.starts_with("http") => {
                 let snappy_flag = url.to_lowercase().ends_with(".sz");
diff --git a/src/cmd/validate.rs b/src/cmd/validate.rs
index 5d7fe4d1..e9327fed 100644
--- a/src/cmd/validate.rs
+++ b/src/cmd/validate.rs
@@ -916,6 +916,7 @@ mod tests_for_schema_validation {
 
 fn load_json(uri: &str) -> Result<String, String> {
     let json_string = match uri {
+        #[cfg(feature = "fetch")]
         url if url.to_lowercase().starts_with("http") => {
             use reqwest::blocking::Client;
 
diff --git a/src/main.rs b/src/main.rs
index 65c978ad..eaac1a61 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -194,6 +194,7 @@ fn main() -> QsvExitCode {
         })
         .unwrap_or_else(|e| e.exit());
 
+    #[cfg(not(target_os = "emscripten"))]
     if util::load_dotenv().is_err() {
         return QsvExitCode::Bad;
     }
@@ -220,7 +221,7 @@ sponsored by datHere - Data Infrastructure Engineering
         }
         return QsvExitCode::Good;
     }
-    match args.arg_command {
+    let code = match args.arg_command {
         None => {
             werr!(
                 "qsv is a suite of CSV command line utilities.
@@ -268,7 +269,12 @@ sponsored by datHere - Data Infrastructure Engineering
                 QsvExitCode::Bad
             }
         },
-    }
+    };
+
+    #[cfg(target_os = "emscripten")]
+    std::process::exit(code as i32);
+
+    code
 }
 
 #[derive(Debug, Deserialize)]
@@ -325,6 +331,7 @@ enum Command {
     Select,
     Slice,
     Snappy,
+    #[cfg(not(target_os = "emscripten"))]
     Sniff,
     Sort,
     SortCheck,
@@ -406,6 +413,7 @@ impl Command {
             Command::Select => cmd::select::run(argv),
             Command::Slice => cmd::slice::run(argv),
             Command::Snappy => cmd::snappy::run(argv),
+            #[cfg(not(target_os = "emscripten"))]
             Command::Sniff => {
                 let rt = tokio::runtime::Runtime::new().unwrap();
                 rt.block_on(cmd::sniff::run(argv))
diff --git a/src/util.rs b/src/util.rs
index eb1da994..da44888c 100644
--- a/src/util.rs
+++ b/src/util.rs
@@ -106,6 +106,7 @@ pub fn timeout_secs(timeout: u16) -> Result<u64, String> {
 
 /// sets user agent
 /// if user agent is not set, then use the default user agent
+#[cfg(feature = "fetch")]
 pub fn set_user_agent(user_agent: Option<String>) -> CliResult<String> {
     use reqwest::header::HeaderValue;
 
@@ -457,6 +458,10 @@ pub fn mem_file_check(
         return Ok(-1_i64);
     }
 
+    if cfg!(target_os = "emscripten") {
+        return Ok(-1_i64);
+    }
+
     let conservative_memcheck_work = get_envvar_flag("QSV_MEMORY_CHECK") || conservative_memcheck;
 
     let mut sys = sysinfo::System::new();
@@ -670,8 +675,9 @@ pub fn init_logger() -> (String, flexi_logger::LoggerHandle) {
         flexi_logger::WriteMode::BufferAndFlush
     };
 
-    let logger = Logger::try_with_env_or_str(qsv_log_env)
-        .unwrap()
+    let logger_builder = Logger::try_with_env_or_str(qsv_log_env).unwrap();
+    #[cfg(not(target_os = "emscripten"))]
+    let logger_builder = logger_builder
         .use_utc()
         .log_to_file(
             FileSpec::default()
@@ -685,9 +691,10 @@ pub fn init_logger() -> (String, flexi_logger::LoggerHandle) {
             Criterion::Size(20_000_000), // 20 mb
             Naming::Numbers,
             Cleanup::KeepLogAndCompressedFiles(10, 100),
-        )
-        .start()
-        .unwrap();
+        );
+    #[cfg(target_os = "emscripten")]
+    let logger_builder = logger_builder.do_not_log();
+    let logger = logger_builder.start().unwrap();
 
     let qsv_args: String = if log::log_enabled!(log::Level::Info) {
         env::args().skip(1).collect::<Vec<_>>().join(" ")
